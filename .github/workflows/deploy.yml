name: üöÄ Production Deployment

on:
  push:
    branches: [main, production]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - staging
          - production

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  NODE_VERSION: '18'

jobs:
  # =============================================================================
  # SECURITY & DEPENDENCY SCANNING
  # =============================================================================
  security-scan:
    name: üîí Security Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîç Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: üìä Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: üîê Audit dependencies
        run: npm audit --audit-level high

  # =============================================================================
  # CODE QUALITY & TESTING
  # =============================================================================
  quality-assurance:
    name: üß™ Quality Assurance
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        node-version: ['18', '20']
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîß Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üîç Type checking
        run: npx tsc --noEmit

      - name: üßπ ESLint
        run: npm run lint

      - name: üé® Prettier check
        run: npx prettier --check .

      - name: üß™ Run tests
        run: npm test -- --coverage --watchAll=false
        env:
          CI: true

      - name: üìä Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: true

  # =============================================================================
  # BUILD VERIFICATION
  # =============================================================================
  build-test:
    name: üèóÔ∏è Build Verification
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [security-scan, quality-assurance]
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üèóÔ∏è Build application
        run: npm run build
        env:
          NODE_ENV: production
          NEXT_TELEMETRY_DISABLED: 1

      - name: üìè Check bundle size
        run: |
          echo "Checking bundle size..."
          ls -la .next/static/chunks/
          du -sh .next/

      - name: üíæ Cache build artifacts
        uses: actions/cache@v3
        with:
          path: .next
          key: ${{ runner.os }}-build-${{ github.sha }}

  # =============================================================================
  # STAGING DEPLOYMENT
  # =============================================================================
  deploy-staging:
    name: üöß Deploy to Staging
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [build-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: staging
      url: https://fynsor-staging.vercel.app
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîß Install Vercel CLI
        run: npm install --global vercel@canary

      - name: üîó Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: üèóÔ∏è Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: üöÄ Deploy to Vercel (Staging)
        id: deploy-staging
        run: |
          url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "deployment-url=$url" >> $GITHUB_OUTPUT

      - name: üîç Run staging tests
        run: |
          # Add staging-specific tests here
          echo "Running staging smoke tests..."
          # curl -f ${{ steps.deploy-staging.outputs.deployment-url }}/api/health

      - name: üí¨ Comment deployment URL
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'üöß **Staging Deployment**: ${{ steps.deploy-staging.outputs.deployment-url }}'
            })

  # =============================================================================
  # PRODUCTION DEPLOYMENT
  # =============================================================================
  deploy-production:
    name: üåü Deploy to Production
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://fynsor.com
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîß Install Vercel CLI
        run: npm install --global vercel@canary

      - name: üîó Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: üèóÔ∏è Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: üöÄ Deploy to Vercel (Production)
        id: deploy-production
        run: |
          url=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "deployment-url=$url" >> $GITHUB_OUTPUT

      - name: üîÑ Assign to custom domain
        run: vercel alias ${{ steps.deploy-production.outputs.deployment-url }} fynsor.com --token=${{ secrets.VERCEL_TOKEN }}

      - name: üß™ Run production health checks
        run: |
          echo "Running production health checks..."
          # Wait for deployment to be available
          sleep 30

          # Health check endpoints
          curl -f https://fynsor.com/api/health || exit 1
          curl -f https://fynsor.com/sitemap.xml || exit 1
          curl -f https://fynsor.com/robots.txt || exit 1

          # Security headers check
          curl -I https://fynsor.com | grep -i "strict-transport-security" || exit 1
          curl -I https://fynsor.com | grep -i "x-frame-options" || exit 1

      - name: üìä Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            https://fynsor.com
            https://fynsor.com/about
            https://fynsor.com/services
            https://fynsor.com/contact
          uploadArtifacts: true
          temporaryPublicStorage: true

  # =============================================================================
  # POST-DEPLOYMENT VERIFICATION
  # =============================================================================
  post-deployment:
    name: üîç Post-Deployment Verification
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [deploy-production]
    if: success()
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üï∑Ô∏è SEO & Accessibility Audit
        run: |
          # Install accessibility testing tools
          npm install -g @axe-core/cli

          # Run accessibility tests
          echo "Running accessibility tests..."
          axe https://fynsor.com --exit

      - name: üîê Security Headers Verification
        run: |
          echo "Verifying security headers..."

          # Check HSTS
          curl -I https://fynsor.com | grep -i "strict-transport-security" || { echo "HSTS missing"; exit 1; }

          # Check CSP
          curl -I https://fynsor.com | grep -i "content-security-policy" || { echo "CSP missing"; exit 1; }

          # Check X-Frame-Options
          curl -I https://fynsor.com | grep -i "x-frame-options" || { echo "X-Frame-Options missing"; exit 1; }

          echo "All security headers verified!"

      - name: üìà Performance Monitoring Setup
        run: |
          echo "Setting up performance monitoring..."
          # Initialize performance monitoring
          # This would typically involve API calls to your monitoring service

      - name: üîî Notify team of successful deployment
        uses: 8398a7/action-slack@v3
        if: success()
        with:
          status: success
          text: 'üéâ Production deployment successful! https://fynsor.com'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: üö® Notify team of deployment failure
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: failure
          text: '‚ùå Production deployment failed!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # =============================================================================
  # ROLLBACK CAPABILITY
  # =============================================================================
  setup-rollback:
    name: üîÑ Setup Rollback Capability
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [deploy-production]
    if: success()
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîß Install Vercel CLI
        run: npm install --global vercel@canary

      - name: üíæ Store deployment info for rollback
        run: |
          echo "Storing deployment information..."
          echo "DEPLOYMENT_URL=${{ needs.deploy-production.outputs.deployment-url }}" >> deployment-info.txt
          echo "COMMIT_SHA=${{ github.sha }}" >> deployment-info.txt
          echo "DEPLOYMENT_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> deployment-info.txt

      - name: üì¶ Upload deployment artifacts
        uses: actions/upload-artifact@v3
        with:
          name: deployment-info-${{ github.sha }}
          path: deployment-info.txt
          retention-days: 30