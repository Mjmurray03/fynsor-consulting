name: 🔒 Security Monitoring

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  # =============================================================================
  # DEPENDENCY VULNERABILITY SCANNING
  # =============================================================================
  dependency-scan:
    name: 🔍 Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Run npm audit
        run: |
          npm audit --audit-level high --json > audit-results.json || true
          cat audit-results.json

      - name: 🧩 Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: 📊 Upload Snyk results to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: snyk.sarif

  # =============================================================================
  # CODE SECURITY ANALYSIS
  # =============================================================================
  code-security:
    name: 🔐 Code Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript
          queries: security-and-quality

      - name: 🏗️ Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: 📊 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      - name: 🛡️ Run Semgrep security analysis
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/javascript

  # =============================================================================
  # DOCKER & CONTAINER SECURITY
  # =============================================================================
  container-security:
    name: 🐳 Container Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📊 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # =============================================================================
  # SECRET SCANNING
  # =============================================================================
  secret-scan:
    name: 🕵️ Secret Detection
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 TruffleHog OSS secret scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: 🔐 GitLeaks secret detection
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  # =============================================================================
  # LICENSE COMPLIANCE
  # =============================================================================
  license-compliance:
    name: 📜 License Compliance Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 📜 Check licenses
        run: |
          npx license-checker --summary
          npx license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC' --excludePrivatePackages

  # =============================================================================
  # SECURITY BENCHMARKING
  # =============================================================================
  security-benchmark:
    name: 📊 Security Benchmark
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        run: npm run build

      - name: 🔒 Security headers test
        run: |
          echo "Testing security headers configuration..."
          node -e "
            const config = require('./next.config.js');
            const headers = config.headers();
            console.log('Security headers configured:', JSON.stringify(headers, null, 2));
          "

      - name: 🛡️ OWASP ZAP baseline scan
        uses: zaproxy/action-baseline@v0.7.0
        with:
          target: 'https://fynsor.com'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

  # =============================================================================
  # NOTIFICATION & REPORTING
  # =============================================================================
  security-notification:
    name: 📢 Security Notification
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [dependency-scan, code-security, container-security, secret-scan]
    if: always() && (failure() || github.event_name == 'schedule')
    steps:
      - name: 🔔 Notify security team
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: failure
          text: '🚨 Security scan detected issues in Fynsor Consulting repository!'
          webhook_url: ${{ secrets.SECURITY_SLACK_WEBHOOK }}

      - name: 📧 Send security report
        if: github.event_name == 'schedule'
        run: |
          echo "Sending daily security report..."
          # This would typically send a comprehensive security report
          # to the security team via email or other communication channels